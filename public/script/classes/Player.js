// Importation du contexte, du canvas et de la constante gravitÃ©
import { context, canvas, GRAVITE } from "../constant.js";

// Alias pour plus de lisibilitÃ©
const gravity = GRAVITE;

// Classe Player qui gÃ¨re le joueur
export default class Player {
  constructor({position, imageSrc, frameRate = 1, frameBuffer = 3, scale = 1.5, collisionBlock, hitBox, animations}) {
    this.imageSrc = imageSrc;       // Source de l'image de base
    this.scale = scale;             // Facteur d'agrandissement
    this.position = position;       // Position du joueur dans le canvas
    this.frameRate = frameRate;     // Nombre de frames pour lâ€™animation
    this.currentFrameRate = 0;      // Frame actuelle affichÃ©e
    this.frameBuffer = frameBuffer; // Vitesse de lâ€™animation (dÃ©calage entre frames)
    this.elapsedFrame = 0;          // Compteur pour gÃ©rer les frames
    this.lastDiretion = "right"     // Direction enregistrÃ©e (derniÃ¨re orientation)
    this.facingLeft = false;        // Pour savoir si le joueur est tournÃ© Ã  gauche
    
    // Vitesse (dÃ©placement horizontal et vertical)
    this.velocity = {
      x: 0,
      y: 1,
    };

    // Hitbox pour gÃ©rer les collisions
    this.hitBox = {
      position:{
        x:this.position.x,
        y:this.position.y
      },
      width: 10,
      height:10
    }
  
    // Chargement de lâ€™image principale
    this.image = new Image()
    this.image.onload = ()=>{
      this.width = (this.image.width / this.frameRate) * this.scale; // largeur rÃ©elle aprÃ¨s scale
      this.height = this.image.height * this.scale;                  // hauteur rÃ©elle aprÃ¨s scale
    }

    this.image.src = imageSrc;    // Chemin de lâ€™image du sprite
    this.animations = animations; // Stocke les diffÃ©rentes animations possibles
    for(let key in this.animations) {
      const image = new Image()
      image.src = this.animations[key].imageSrc;
      this.animations[key].image = image // PrÃ©charge les images des animations
    }
  }

  // Changer de sprite (idle, run, jump, etc.)
  switchSprite(key){
    if(this.image === this.animations[key])return // Si dÃ©jÃ  sur ce sprite â†’ ne rien faire
    this.image = this.animations[key].image;      // Nouvelle image
    this.frameBuffer = this.animations[key].frameBuffer; // Vitesse animation
    this.frameRate = this.animations[key].frameRate;     // Nombre de frames
  }

  // Mise Ã  jour de la hitbox (position et taille de la zone de collision)
  hiter(){
    this.hitBox = {
       position: {
         x: this.position.x + (this.image.width / this.frameRate ) /2, // DÃ©calage horizontal
         y: this.position.y + (this.image.height - this.hitBox.height) * 5, // DÃ©calage vertical
       },
       width: 50,
       height: 70,
     };
  }
  
  // Dessine le sprite sur le canvas
  draw() {
    // Zone du sprite Ã  dÃ©couper dans lâ€™image (frame courante)
    const cropBox = {
      position: {
        x: this.currentFrameRate * (this.image.width / this.frameRate), // DÃ©calage horizontal
        y: 0,
      },
      width: this.image.width / this.frameRate, // Largeur dâ€™une frame
      height: this.image.height,               // Hauteur dâ€™une frame
    };

    // Position et taille finales Ã  dessiner
    const drawX = this.position.x;
    const drawY = this.position.y;
    const drawWidth = this.width;
    const drawHeight = this.height;

    context.save(); // Sauvegarde lâ€™Ã©tat du canvas

    // Si le joueur est tournÃ© vers la gauche â†’ effet miroir horizontal
    if (this.facingLeft) {
      context.translate(drawX + drawWidth / 2, drawY + drawHeight / 2);
      context.scale(-1, 1); 
      context.translate(-drawX - drawWidth / 2, -drawY - drawHeight / 2);
    }
     
    // Dessine lâ€™image du sprite dÃ©coupÃ©e
    context.drawImage(
      this.image,
      cropBox.position.x,
      cropBox.position.y,
      cropBox.width,
      cropBox.height,
      this.position.x,
      this.position.y,
      this.width ,
      this.height
    );  

    context.restore(); // Restaure lâ€™Ã©tat initial du canvas

    /* Debug hitbox joueur
    context.fillStyle = "white";
    context.fillRect(this.position.x, this.position.y, 40, this.height);*/
  }

  // Met Ã  jour la position, lâ€™animation et la physique du joueur
  update(deltaTime) {
    this.hiter() // Recalcule la hitbox
    
    // Debug visuel : rect transparents pour voir les zones
    context.fillStyle = "rgba(0,255, 255, 0)"
    context.fillRect(this.position.x, this.position.y,this.width, this.height);
    context.fillStyle = "rgba(255,0, 0, 0.5)";
    context.fillRect(
       this.hitBox.position.x,
       this.hitBox.position.y,
       this.hitBox.width,
       this.hitBox.height
     );

    this.draw(); // Dessine le sprite

    // ðŸ”½ Appliquer les dÃ©placements avec le deltaTime
    this.position.y += this.velocity.y * deltaTime / 16;
    this.position.x += this.velocity.x * deltaTime / 16;

    // Applique la gravitÃ© si le joueur nâ€™est pas au sol
    if (this.position.y + this.height + this.velocity.y + 65 < canvas.height) {
      this.velocity.y += gravity; 
    } else this.velocity.y = 0;

    this.updateFrame(); // Passe Ã  la frame suivante si nÃ©cessaire
  }

  // Gestion des frames de lâ€™animation
  updateFrame(){
    this.elapsedFrame ++ ; // IncrÃ©mente le compteur
    if(this.elapsedFrame % this.frameBuffer === 0){ // ContrÃ´le la vitesse
      if(this.currentFrameRate < this.frameRate - 1){
         this.currentFrameRate++; // Frame suivante
      }else  
         this.currentFrameRate = 0; // Retour au dÃ©but
    }
  }

  // VÃ©rifie la collision avec un obstacle
  checkCollisionWithObstacle(obstacle) {
    const playerBottom = this.hitBox.position.y + this.hitBox.height;
    const obstacleTop = obstacle.hitBox.position.y;

    // Collision horizontale
    const isCollidingHorizontally =
      this.hitBox.position.x < obstacle.hitBox.position.x + obstacle.hitBox.width &&
      this.hitBox.position.x + this.hitBox.width > obstacle.hitBox.position.x;

    const tolerance = 5; // Marge dâ€™erreur pour Ã©viter des bugs

    // VÃ©rifie si le joueur tombe sur le haut de lâ€™obstacle
    const isFallingOnTop =
      playerBottom <= obstacleTop + tolerance &&
      playerBottom + this.velocity.y >= obstacleTop;

    // Si collision dÃ©tectÃ©e â†’ stoppe la chute et place le joueur sur lâ€™obstacle
    if (isCollidingHorizontally && isFallingOnTop) {
      this.velocity.y = 0;
      this.position.y = obstacle.hitBox.position.y - this.height;
    }
  }
}
